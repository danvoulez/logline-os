#!/bin/bash

# LogLine Universe - Legacy Code Cleanup Script
# Remove c√≥digo antigo/redundante, mantendo apenas a arquitetura nova

set -e

echo "üßπ Limpando c√≥digo legado do LogLine Universe..."

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Fun√ß√£o para deletar com confirma√ß√£o
delete_item() {
    local item="$1"
    if [ -e "$item" ]; then
        echo -e "${YELLOW}üóëÔ∏è  Deletando: $item${NC}"
        rm -rf "$item"
    else
        echo -e "${BLUE}‚è≠Ô∏è  J√° removido: $item${NC}"
    fi
}

echo -e "${BLUE}üìã Removendo pastas legadas/redundantes...${NC}"

# C√≥digo antigo/duplicado
delete_item "LogLine Network OS/"
delete_item "motor/"
delete_item "timeline/"
delete_item "rules/"
delete_item "modules/"
delete_item "time/"
delete_item "observer/"
delete_item "onboarding/"
delete_item "infra/"
delete_item "enforcement/"
delete_item "grammar/"

# Pastas vazias/experimentais
delete_item "agents/"
delete_item "contracts/"
delete_item "examples/"
delete_item "SEED/"
delete_item "receipts/"
delete_item "runtime/"
delete_item "schema/"
delete_item "test/"
delete_item "test_data/"
delete_item "ui/"
delete_item "target/"

# Arquivos de teste/prot√≥tipo soltos
delete_item "teste_enforcement.lll"
delete_item "recibo_loja_0001.lll"
delete_item "system.manifest.lll"
delete_item "manifesto_logline.lll"
delete_item "lib.rs"
delete_item "setup_postgres.sh"

# Arquivos tempor√°rios
delete_item ".DS_Store"

# Scripts antigos (manter apenas os √∫teis)
delete_item "scripts/teste_enforcement.sh"
delete_item "scripts/unificar_projeto.sh"

echo -e "${BLUE}üìã Limpando arquivos tempor√°rios do Railway...${NC}"
delete_item "RAILWAY_SETUP_GUIDE.md"  # Duplicado, manter s√≥ RAILWAY_MANUAL_SETUP.md
delete_item "railway.json"  # Vazio, ser√° recriado se necess√°rio

echo -e "${GREEN}‚úÖ Limpeza conclu√≠da!${NC}"

echo -e "${BLUE}üìä Estrutura final (c√≥digo limpo):${NC}"
echo "‚úÖ Servi√ßos principais:"
echo "   ‚Ä¢ logline-core/"
echo "   ‚Ä¢ logline-engine/"
echo "   ‚Ä¢ logline-rules/"
echo "   ‚Ä¢ logline-timeline/"
echo "   ‚Ä¢ logline-id/"
echo "   ‚Ä¢ logline-protocol/"

echo "‚úÖ Infraestrutura:"
echo "   ‚Ä¢ cli/"
echo "   ‚Ä¢ federation/"
echo "   ‚Ä¢ migrations/"
echo "   ‚Ä¢ tests/"
echo "   ‚Ä¢ fuzz/"
echo "   ‚Ä¢ docs/"

echo "‚úÖ Deploy:"
echo "   ‚Ä¢ Dockerfile.*"
echo "   ‚Ä¢ scripts/railway_*.sh"
echo "   ‚Ä¢ scripts/run_migrations.sh"
echo "   ‚Ä¢ Makefile"

echo "‚úÖ Documenta√ß√£o:"
echo "   ‚Ä¢ ROADMAP.md"
echo "   ‚Ä¢ TASKLIST.md"
echo "   ‚Ä¢ RAILWAY_MANUAL_SETUP.md"

echo -e "${GREEN}üéâ Reposit√≥rio limpo e organizado!${NC}"
echo -e "${YELLOW}üìù Pr√≥ximos passos:${NC}"
echo "1. git add -A"
echo "2. git commit -m 'Clean up legacy code, keep only new WebSocket mesh architecture'"
echo "3. git push origin main"

# Mostrar estat√≠sticas
echo -e "${BLUE}üìà Estat√≠sticas do reposit√≥rio limpo:${NC}"
echo "‚Ä¢ Servi√ßos: 6 (core + 5 microservices)"
echo "‚Ä¢ Testes: $(find tests/ -name "*.rs" 2>/dev/null | wc -l | tr -d ' ') arquivos"
echo "‚Ä¢ Docs: $(find docs/ -name "*.md" 2>/dev/null | wc -l | tr -d ' ') arquivos"
echo "‚Ä¢ Dockerfiles: $(ls Dockerfile.* 2>/dev/null | wc -l | tr -d ' ') servi√ßos"
